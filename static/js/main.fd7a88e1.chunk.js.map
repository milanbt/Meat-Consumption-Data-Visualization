{"version":3,"sources":["chart.js","App.js","serviceWorker.js","index.js"],"names":["hslToHex","h","s","l","r","g","b","hue2rgb","p","q","t","toHex","x","hex","Math","round","toString","length","series","seriesColor","Chart","props","dataArr","i","data","push","map","d","TIME","y","Value","numSeries","style","stroke","strokeWidth","xType","width","height","title","tickLabelAngle","tickPadding","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","App","React","useState","classes","location","setLocation","subject","setSubject","currentData","setCurrentData","inputLabel","useRef","setLabelWidth","useEffect","current","offsetWidth","className","Container","maxWidth","FormControl","InputLabel","shrink","id","Select","labelId","value","onChange","event","target","displayEmpty","MenuItem","Button","variant","color","onClick","meatJson","filter","LOCATION","SUBJECT","MEASURE","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd7a88e1.chunk.js","sourcesContent":["import React from 'react';\nimport {XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries} from 'react-vis';\n\n/*class Chart extends React.Component {\n    render() {\n        return (\n            <XYPlot\n                xType=\"ordinal\"\n                width={500}\n                height={500}\n                margin={{\n                    left: 70\n                }}>\n                <VerticalGridLines />\n                <HorizontalGridLines />\n                <XAxis />\n                <YAxis />\n                <LineSeries\n                    data={[{x:1, y:2},\n                            {x:2, y:4},\n                            {x:3, y:1}]}\n                    style={{stroke: 'blue', strokeWidth: 3}} \n                    />\n            </XYPlot>\n        );\n    }\n}*/\nfunction hslToHex(h, s, l) {\n    h /= 360;\n    s /= 100;\n    l /= 100;\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } \n    else {\n        const hue2rgb = (p, q, t) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    const toHex = x => {\n        const hex = Math.round(x * 255).toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n}\nconst series = [];\nconst seriesColor = [];\nconst Chart = (props) => {\n\n    const dataArr = [];\n    for (var i = 0; i < props.data.length; i++) {\n        dataArr.push(props.data[i].map((d)=> {\n            return {x: d.TIME, y: d.Value};\n        }));\n    }\n    let numSeries = dataArr.length;\n\n    for (i = 0; i < dataArr.length; i++) {\n        if (seriesColor.length <= i) {\n            seriesColor.push(hslToHex((((i%3) * numSeries/3)+(i/2)) * 255.0 / numSeries, 255, 128));\n        }\n        series.push(<LineSeries\n        data={dataArr[i]}\n        style={{stroke: seriesColor[i], strokeWidth: 3}}/>);\n    }\n    \n    /*const dataArr = props.data.map((e)=> {\n        e.map((d)=>\n            return {x: d.TIME, \n            y: d.Value};\n        )\n    });*/\n\n    return (\n        <XYPlot\n            xType=\"ordinal\"\n            width={1000}\n            height={500}>\n            <VerticalGridLines />\n            <HorizontalGridLines />\n            <XAxis title=\"Year\" tickLabelAngle={35} tickPadding={24}/>\n            <YAxis title=\"KG per Capita\" />\n                {series}\n        </XYPlot>\n    );\n}\nexport default Chart;\n","import React from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport './App.css';\nimport Chart from './chart.js';\n\n// OECD (2020), Meat consumption (indicator). doi: 10.1787/fa290fd0-en (Accessed on 21 January 2020)\nimport meatJson from './meat_consumption.json';\n\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction App() {\n  const [row, setRow] = React.useState();\n  const classes = useStyles();\n\n  const [location, setLocation] = React.useState('');\n  const [subject, setSubject] = React.useState('');\n  const [currentData, setCurrentData] = React.useState([]);\n\n  // why doesn't React.useRef(null) work?\n  const inputLabel = React.useRef('');\n  const [labelWidth, setLabelWidth] = React.useState(0);\n  React.useEffect(() => {\n    setLabelWidth(inputLabel.current.offsetWidth);\n  }, []);\n\n  const handleLocationChange = event => {\n    setLocation(event.target.value);\n  };\n  const handleSubjectChange = event => {\n    setSubject(event.target.value);\n  };\n  const handleGraphAdd = event => {\n    setCurrentData([...currentData, meatJson.filter((r)=>{\n      return r.LOCATION === location;\n    }).filter((r)=>{\n      return r.SUBJECT === subject;\n    }).filter((r)=>{\n      return r.MEASURE === 'KG_CAP';\n    })]);\n  };\n\n  // Read JSON file and populate selection menus\n  // TO DO\n  // ---\n\n  React.useEffect(() => {\n\n  });\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"lg\">\n        <Chart data={currentData}/>\n        <FormControl className={classes.formControl}>\n          <InputLabel shrink id=\"location\">\n            Location\n          </InputLabel>\n          <Select\n            labelId=\"location\"\n            id=\"location\"\n            value={location}\n            onChange={handleLocationChange}\n            displayEmpty\n            className={classes.selectEmpty}\n          >\n            <MenuItem value=\"\">\n              <em>None</em>\n            </MenuItem>\n            <MenuItem value={'AUS'}>Australia</MenuItem>\n            <MenuItem value={'CAN'}>Canada</MenuItem>\n            <MenuItem value={'JPN'}>Japan</MenuItem>\n            <MenuItem value={'KOR'}>Korea</MenuItem>\n            <MenuItem value={'MEX'}>Mexico</MenuItem>\n            <MenuItem value={'NZL'}>New Zealand</MenuItem>\n            <MenuItem value={'TUR'}>Turkey</MenuItem>\n            <MenuItem value={'USA'}>USA</MenuItem>\n            <MenuItem value={'ARG'}>Argentina</MenuItem>\n            <MenuItem value={'BRA'}>Brazil</MenuItem>\n            <MenuItem value={'CHL'}>Chile</MenuItem>\n            <MenuItem value={'CHN'}>China</MenuItem>\n            <MenuItem value={'COL'}>Colombia</MenuItem>\n            <MenuItem value={'EGY'}>Egypt</MenuItem>\n            <MenuItem value={'ETH'}>Ethiopia</MenuItem>\n            <MenuItem value={'IND'}>India</MenuItem>\n            <MenuItem value={'IDN'}>Indonesia</MenuItem>\n            <MenuItem value={'IRN'}>Iran</MenuItem>\n            <MenuItem value={'ISR'}>Israel</MenuItem>\n            <MenuItem value={'KAZ'}>Kazakhstan</MenuItem>\n            <MenuItem value={'MYS'}>Malaysia</MenuItem>\n            <MenuItem value={'NGA'}>Nigeria</MenuItem>\n            <MenuItem value={'PAK'}>Pakistan</MenuItem>\n            <MenuItem value={'PRY'}>Paraguay</MenuItem>\n            <MenuItem value={'PER'}>Peru</MenuItem>\n            <MenuItem value={'PHL'}>Phillipines</MenuItem>\n            <MenuItem value={'RUS'}>Russia</MenuItem>\n            <MenuItem value={'SAU'}>Saudi Arabia</MenuItem>\n            <MenuItem value={'ZAF'}>South Africa</MenuItem>\n            <MenuItem value={'THA'}>Thailand</MenuItem>\n            <MenuItem value={'UKR'}>Ukraine</MenuItem>\n            <MenuItem value={'VNM'}>Viet Nam</MenuItem>\n            <MenuItem value={'WLD'}>WLD</MenuItem>\n            <MenuItem value={'EU27'}>EU27</MenuItem>\n            <MenuItem value={'OECD'}>OECD</MenuItem>\n            <MenuItem value={'BRICS'}>BRICS</MenuItem>\n            <MenuItem value={'NOR'}>Norway</MenuItem>\n            <MenuItem value={'CHE'}>Switzerland</MenuItem>\n            <MenuItem value={'GBR'}>United Kingdom</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl className={classes.formControl}>\n          <InputLabel shrink id=\"subject\">\n            Meat Type\n          </InputLabel>\n          <Select\n            labelId=\"subject\"\n            id=\"subject\"\n            value={subject}\n            onChange={handleSubjectChange}\n            displayEmpty\n            className={classes.selectEmpty}>\n            <MenuItem value=\"\">\n              <em>None</em>\n            </MenuItem>\n            <MenuItem value={'BEEF'}>Beef</MenuItem>\n            <MenuItem value={'PIG'}>Pig</MenuItem>\n            <MenuItem value={'POULTRY'}>Poultry</MenuItem>\n            <MenuItem value={'SHEEP'}>Sheep</MenuItem>\n          </Select>\n        </FormControl>\n        <Button variant=\"outlined\" color=\"primary\" onClick={handleGraphAdd}>\n          Add to Chart\n        </Button>\n      </Container>\n      <p>Data from OECD (2020), Meat consumption (indicator). doi: 10.1787/fa290fd0-en (Accessed on 21 January 2020)</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}